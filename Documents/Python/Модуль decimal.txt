
    Decimal – десятичное число, для выполнения точных расчетов;
    Fraction – число, представляющее собой обыкновенную дробь, с заданным числителем и знаменателем;
    Complex – комплексное число.

Тип данных Decimal содержит некоторые встроенные математические методы, возвращающие значения Decimal.
     Функция   	Описание
sqrt() 	вычисляет квадратный корень из Decimal числа
exp()	возвращает exe^xex для Decimal числа
ln()	вычисляет натуральный логарифм (по основанию eee) Decimal числа
log10() вычисляет десятичный логарифм (по основанию 101010) Decimal числа

Приведенный ниже код:

from decimal import *
num = Decimal('10.0')
print(num.sqrt())
print(num.exp())
print(num.ln())
print(num.log10())

Тип данных Decimal также содержит полезный метод as_tuple() который возвращает кортеж из 333 элементов:

    sign – знак числа (000 для положительного числа и 111 для отрицательного числа);
    digits – цифры числа;
    exponent – значение экспоненты (количество цифр после точки, умноженное на ?1-1?1),

Тип данных Decimal также содержит полезный метод as_tuple() который возвращает кортеж из 333 элементов:

    sign – знак числа (000 для положительного числа и 111 для отрицательного числа);
    digits – цифры числа;
    exponent – значение экспоненты (количество цифр после точки, умноженное на ?1-1?1),
from decimal import *

num = Decimal('-1.4568769017')
num_tuple = num.as_tuple()

print(num_tuple.sign)
print(num_tuple.digits)
print(num_tuple.exponent)

выводит:

1
(1, 4, 5, 6, 8, 7, 6, 9, 0, 1, 7)
-10

Работа с контекстом Decimal чисел

Базовые параметры Decimal можно посмотреть в его контексте, выполнив функцию getcontext().

Приведенный ниже код:

from decimal import *

print(getcontext())

выводит:

Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, 
flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])

Мы видим здесь, что точность 28 знаков, округление к ближайшему четному, пределы по экспоненте ± 999999\pm 999999± 999999, capitals – это про заглавную Е при печати, включенные ловушки – неправильная операция, деление на ноль, переполнение.

Округление чисел

Округляют числа Decimal с помощью метода quantize(). Этот метод в качестве первого аргумента принимает объект Decimal, указывающий на формат округления.

Приведенный ниже код:

from decimal import *

getcontext().prec = 4                    # устанавливаем точность числа

num = Decimal('3.1415926535')

print(num.quantize(Decimal('1.000')))    #  округление до 3 цифр в дробной части  
print(num.quantize(Decimal('1.00')))     #  округление до 2 цифр в дробной части
print(num.quantize(Decimal('1.0')))      #  округление до 1 цифр в дробной части

Помимо первого параметра, метод quantize() принимает в качестве второго параметра стратегию округления:

    ROUND_CEILING – округление в направлении бесконечности (Infinity);
    ROUND_FLOOR – округляет в направлении минус бесконечности (- Infinity);
    ROUND_DOWN – округление в направлении нуля;
    ROUND_HALF_EVEN – округление до ближайшего четного числа, число 6.96.96.9 округлится не до 777, а до 666;
    ROUND_HALF_DOWN – округление до ближайшего нуля;
    ROUND_UP – округление от нуля;
    ROUND_05UP – округление от нуля (если последняя цифра после округления до нуля была бы 0 или 5, в противном случае к нулю).
