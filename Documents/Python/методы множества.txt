Метод add()
Для добавления нового элемента в множество используется метод add().

Удаление элемента
Для удаления элементов из множества используются методы:

    remove();
    discard();
    pop().

Метод remove()
Метод remove() — удаляет элемент из множества с генерацией исключения (ошибки) в случае, если такого элемента нет.

Метод discard()
Метод discard() — удаляет элемент из множества без генерации исключения (ошибки), если элемент отсутствует.

Метод pop()
Метод pop() — удаляет и возвращает случайный элемент из множества с генерацией исключения (ошибки) при попытке удаления из пустого множества.

Метод clear()
Метод clear() удаляет все элементы из множества.

Объединение множеств: метод union()
Объединение множеств это множество, состоящее из элементов, принадлежащих хотя бы одному из объединяемых множеств. Для этой операции существует метод union().
Для объединения двух множеств можно также использовать оператор |

Пересечение множеств: метод intersection()
Пересечение множеств это множество, состоящее из элементов, принадлежащих одновременно каждому из пересекающихся множеств. Для этой операции существует метод intersection()
?Обратите внимание, метод intersection() возвращает новое множество в которое входят общие элементы множеств myset1 и myset2. Для изменения текущего множества используется метод intersection_update().
Для пересечения двух множеств можно также использовать оператор &

Разность множеств: метод difference()
Разность множеств это множество, в которое входят все элементы первого множества, не входящие во второе множество. Для этой операции существует метод difference().
Для разности двух множеств можно также использовать оператор -

Симметрическая разность: метод symmetric_difference()
Симметрическая разность множеств это множество, включающее все элементы исходных множеств, не принадлежащие одновременно обоим исходным множествам. Для этой операции существует метод symmetric_difference()
Для симметрической разности двух множеств можно также использовать оператор ^

A | B
A.union(B)			Возвращает множество, являющееся объединением множеств A и B

A |= B
A.update(B)			Добавляет в множество A все элементы из множества B

A & B
A.intersection(B)		Возвращает множество, являющееся пересечением множеств A и B

A &= B
A.intersection_update(B)	Оставляет в множестве A только те элементы, которые есть в множестве B

A - B
A.difference(B)			Возвращает разность множеств A и B

A -= B
A.difference_update(B)		Удаляет из множества A все элементы, входящие в B

A ^ B
A.symmetric_difference(B)	Возвращает симметрическую разность множеств A и B

A ^= B
A.symmetric_difference_update(B) Записывает в A симметрическую разность множеств A и B

Метод issubset()
Для определения, является ли одно из множеств подмножеством другого, используется метод issubset(). Данный метод возвращает значение True, если одно множество является подмножеством другого, и False, если не является.

Метод issuperset()
Для определения, является ли одно из множеств надмножеством другого, используется метод issuperset(). Данный метод возвращает значение True, если одно множество является надмножеством другого, в противном случае он возвращает False.

Метод isdisjoint()
Для определения отсутствия общих элементов в множествах используется метод isdisjoint(). Данный метод возвращает значение True, если множества не имеют общих элементов, и  False, когда множества имеют общие элементы.