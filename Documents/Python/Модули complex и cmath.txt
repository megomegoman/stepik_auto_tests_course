В языке Python есть возможность работать с комплексными числами. Общая форма представления комплексного числа следующая: real + imag j, где

    real – вещественная часть комплексного числа;
    imag – мнимая часть комплексного числа, которая завершается символом j или J.

  Обратите внимание: в Python используется буква j, а не i.

Приведенный ниже код:

z1 = 5 + 7j
z2 = 1j
z3 = -3 + 5J
z4 = 1.5 + 3.2j

print(z1, z2, z3, z4, sep='\n')
print(type(z1))

выводит:

(5+7j)
1j
(-3+5j)
(1.5+3.2j)
<class 'complex'>

Создание комплексных чисел

Комплексные числа можно создать с помощью литерала, как выше, а можно с помощью функции complex(), которая принимает два аргумента: вещественную и мнимую часть числа, либо строковое представление числа.

Приведенный ниже код:

z1 = -3 + 2j              # создание на основе литерала
z2 = complex(6, -8)       # z2 = 6 - 8j
z3 = complex(0, 2.5)      # z3 = 2.5j
z4 = complex(5, 0)        # z4 = 5 + 0j
z5 = complex('3+4j')      # создание на основе строки

Методы и свойства комплексных чисел

Для получения действительной и мнимой частей комплексного числа используются свойства real и imag.

Приведенный ниже код:

z = 3+4j

print('Действительная часть =', z.real)
print('Мнимая часть =', z.imag)
Для нахождения сопряженного комплексного числа, можно использовать метод conjugate().

Для нахождения модуля комплексного числа, используется встроенная функция abs().

Встроенный модуль math работает с вещественными числами. Для работы с комплексными числами есть модуль cmath. Модуль cmath включает дополнительные функции для использования комплексных чисел.

import cmath

z = 2+3j
print(cmath.phase(z)) # полярный угол
print(cmath.polar(z)) # полярные координаты

Модуль cmath содержит следующие категории функций:

    Экспоненциальные и логарифмические функции

    Квадратные корни

    Тригонометрические функции и их обратные

    Гиперболические функции и их обратные
